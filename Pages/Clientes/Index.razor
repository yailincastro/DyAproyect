@page "/Cliente"
<h3> Cliente (@Clientes.Count)</h3>

@if (!ShowForm)
{
    <h3>Clientes(@Clientes.Count)</h3>
    <div class="mb-2">
        <button class="btn btn-success"
            @onclick="()=>{ShowForm = !ShowForm;}">
            Agregar
        </button>
    </div>
}
<div class="container">
    @if (ShowForm)
    {
        <h3>@TituloForm</h3>
        <EditForm Model="request" OnValidSubmit="send">
            <div class="mb-3 input-group"> 
                <label class="input-group-text">Nombre</label>
                <InputText class="form-control" @bind-Value="request.Nombre"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Apellido</label>
                <InputText class="form-control" @bind-Value="request.Apellido"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Cedula</label>
                <InputText class="form-control" @bind-Value="request.Cedula"></InputText>
            </div>
            <div class="btn-group">
                <button type="submit" class="btn btn-outline-success">Guardar</button>
                <button @onclick="Cancelar" class="btn btn-outline-danger">Cancelar</button>
            </div>
        </EditForm>
        <br/>
    }
    else
    {
        @foreach (var cliente in Clientes)
        {
            <div class="card" style="width:18rem;">
                <div class="card-body">
                    <label class="card-title">@cliente.Nombre</label>
                    <div class="card-text">
                        <label>@cliente.Apellido</label>
                    </div>
                    <button @onclick="()=>Seleccionar(cliente.Id)"
                            class="btn btn-warning">
                        Editar
                    </button>
                    <button @onclick="()=>Eliminar(cliente)"
                            class="btn btn-danger">
                        Eliminar
                    </button>
                </div>
            </div>
        }
    }
</div>

@code{
         public string TituloForm => request.Id == 0 ? 
    "Agregar contacto" : "Modificar contacto";

    public bool ShowForm { get; set; } = false;
    public string Filtro { get; set; } = "";

    public ClientesRequest request { get; set; }
    = new ClientesRequest();

    public List<ClienteResponse> Clientes {get; set; }
     =new List<ClienteResponse>();

    void Cancelar()
    {
        request  = new ClientesRequest();
        ShowForm = false;
    }
        async Task CargarCliente()
        {
            var Resulta= await ClienteServices.Consultar(Filtro);
            if (Resulta.Success){
                Clientes=Resulta.Data!;
            }

        }

     protected override async Task OnInitializedAsync()
    {
        await CargarCliente();
    }    
    
    public async Task  send()
        {
            @if (request.Id==0)
            {
                var e= await ClienteServices.Crear(request);
            if (e.Success)
            {
                Cancelar();
                await CargarCliente();
                StateHasChanged();
            }
                
            }
            else
            {
                 var e = await ClienteServices.Modificar(request);
            if (e.Success)
            {
                Cancelar();
                await CargarCliente();
                StateHasChanged();
            }
            }

        }
        public void Seleccionar( int Id)
        {
             ShowForm = true;
                 request = Clientes
                 .Where(c => c.Id == Id)
                .Select(c => c.ToRequest())
                .FirstOrDefault()??new ClientesRequest();

        }
        public async Task Eliminar(ClienteResponse cliente)
    {
        var resulta = await ClienteServices.Eliminar(cliente.ToRequest());
        if (resulta.Success)
        {
            await CargarCliente();
            StateHasChanged();
        }
    }
}